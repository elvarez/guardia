<script>
    var firstSeatLabel = 1;

$(document).ready(function() {
    var $cart = $('#selected-seats'),
    $counter = $('#counter'),
    $total = $('#total'),
    sc = $('#seat-map').seatCharts({
  map: [
      'fffff',
      'fffff',
  ],
  seats: {
      f: {
    price   : 100,
    classes : 'first-class', //your custom CSS class
    category: 'First Class'
      },
      
  },
  naming : {
      top : false,
      getLabel : function (character, row, column) {
    return firstSeatLabel++;
      },
  },
  click: function () {
      if (this.status() == 'available') {
    //let's create a new <li> which we'll add to the cart items
    $('<li>'+this.settings.label+'</b> </li>')
        .attr('id', 'cart-item-'+this.settings.id)
        .data('seatId', this.settings.id)
        .appendTo($cart);


    $resNum = parseInt($('#counter').html());
    $seatId = $('#order_reservations_attributes_' +
      $resNum + '_seat_id');
    $seatRow = $('#order_reservations_attributes_' +
      $resNum + '_seat_row');
    $seatCol = $('#order_reservations_attributes_' +
      $resNum + '_seat_col');

    $seatId.val(this.settings.label);
    $seatRow.val(this.settings.row + 1);
    $seatCol.val(this.settings.column + 1);


    // duplicate nested form
    if ($('.duplicatable_nested_form').length) {
      nestedForm = $('.duplicatable_nested_form').last().clone();
      lastNestedForm = $('.duplicatable_nested_form').last();
      newNestedForm = $(nestedForm).clone();
      formsOnPage = $('.duplicatable_nested_form').length;

      $(newNestedForm).find('label').each(function() {
        var newLabel, oldLabel;
        oldLabel = $(this).attr('for');
        newLabel = oldLabel.replace(new RegExp(/_[0-9]+_/), "_" + formsOnPage + "_");
        return $(this).attr('for', newLabel);
      });

      $(newNestedForm).find('select, input').each(function() {
        var newId, newName, oldId, oldName;
        oldId = $(this).attr('id');
        newId = oldId.replace(new RegExp(/_[0-9]+_/), "_" + formsOnPage + "_");
        $(this).attr('id', newId);
        oldName = $(this).attr('name');
        newName = oldName.replace(new RegExp(/\[[0-9]+\]/), "[" + formsOnPage + "]");
        return $(this).attr('name', newName);
      });

      $(newNestedForm).insertAfter(lastNestedForm);
    }

    /*
     * Lets update the counter and total
     *
     * .find function will not find the current seat, because it will change its stauts only after return
     * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
     */
    $counter.text(sc.find('selected').length+1);
    $total.text(recalculateTotal(sc)+this.data().price);
    
    return 'selected';
      } else if (this.status() == 'selected') {
    //update the counter
    $counter.text(sc.find('selected').length-1);
    //and total
    $total.text(recalculateTotal(sc)-this.data().price);
    
    //remove the item from our cart
    $('#cart-item-'+this.settings.id).remove();
    
    //seat has been vacated
    return 'available';
      } else if (this.status() == 'unavailable') {
    //seat has been already booked
    return 'unavailable';
      } else {
    return this.style();
      }
  }
    });

    //this will handle "[cancel]" link clicks
    $('#selected-seats').on('click', '.cancel-cart-item', function () {
  //let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
  sc.get($(this).parents('li:first').data('seatId')).click();
    });

    //let's pretend some seats have already been booked

    <% @allres.each do |r| %>
      sc.get(['<%= "#{r.seat_row}_#{r.seat_col}" %>']).status('unavailable');
    <% end %>
    });

function recalculateTotal(sc) {
    var total = 0;
    
    //basically find every selected seat and sum its price
    sc.find('selected').each(function () {
  total += this.data().price;
    });
    
    return total;
}
</script>


