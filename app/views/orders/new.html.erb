<script>
    var firstSeatLabel = 1;

$(document).ready(function() {
    var $cart = $('#selected-seats'),
    $input = $('#order_reservation_seat_id'),
    $inputrow = $('#order_reservation_seat_row'),
    $inputcol = $('#order_reservation_seat_col'),    
    $counter = $('#counter'),
    $total = $('#total'),
    sc = $('#seat-map').seatCharts({
  map: [
      'fffff',
      'fffff',
  ],
  seats: {
      f: {
    price   : 100,
    classes : 'first-class', //your custom CSS class
    category: 'First Class'
      },
      
  },
  naming : {
      top : false,
      getLabel : function (character, row, column) {
    return firstSeatLabel++;
      },
  },
  click: function () {
      if (this.status() == 'available') {
    //let's create a new <li> which we'll add to the cart items
    $('<li>'+this.settings.label+'</b> </li>')
        .attr('id', 'cart-item-'+this.settings.id)
        .data('seatId', this.settings.id)
        .appendTo($cart);

    $input.val( $input.val() + this.settings.label);
    $inputrow.val( $inputrow.val() + (this.settings.row + 1));
    $inputcol.val( $inputcol.val() + (this.settings.column + 1));
    // $('#new_order').
    
    /*
     * Lets update the counter and total
     *
     * .find function will not find the current seat, because it will change its stauts only after return
     * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
     */
    $counter.text(sc.find('selected').length+1);
    $total.text(recalculateTotal(sc)+this.data().price);
    
    return 'selected';
      } else if (this.status() == 'selected') {
    //update the counter
    $counter.text(sc.find('selected').length-1);
    //and total
    $total.text(recalculateTotal(sc)-this.data().price);
    
    //remove the item from our cart
    $('#cart-item-'+this.settings.id).remove();
    
    //seat has been vacated
    return 'available';
      } else if (this.status() == 'unavailable') {
    //seat has been already booked
    return 'unavailable';
      } else {
    return this.style();
      }
  }
    });

    //this will handle "[cancel]" link clicks
    $('#selected-seats').on('click', '.cancel-cart-item', function () {
  //let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
  sc.get($(this).parents('li:first').data('seatId')).click();
    });

    //let's pretend some seats have already been booked

    <% @allres.each do |r| %>
      sc.get(['<%= "#{r.seat_row}_#{r.seat_col}" %>']).status('unavailable');
    <% end %>
    });

function recalculateTotal(sc) {
    var total = 0;
    
    //basically find every selected seat and sum its price
    sc.find('selected').each(function () {
  total += this.data().price;
    });
    
    return total;
}
</script>



      <h2><%= @event.name %></h2>

<div class="wrapper">
  <div class="container">
    <div id="seat-map">
      <div class="front-indicator"></div>
    
      </div>
  
    <div class="booking-details">
    
      <h3> Selected Seats (<span id="counter">0</span>):</h3>

      <ul id="selected-seats"></ul>
        Total: <b>$<span id="total">0</span></b>

        <%= form_for [@event, @order] do |f|%>
          <%= f.fields_for @order.reservations.build do |builder| %>
            <%= builder.hidden_field :event_id, value: @event.id %>
            <%= builder.hidden_field :user_id, value: current_user.id %>
            <%= builder.hidden_field :seat_id %>
            <%= builder.hidden_field :seat_col %>
            <%= builder.hidden_field :seat_row %>
          <% end %>
          <%= f.submit "Confirm" %>
        <% end %>

    </div>
  </div>
</div>
